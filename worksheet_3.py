# -*- coding: utf-8 -*-
"""Worksheet_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I4UrlJFr62mBr6QQNaEDhP7wTh_bODHx

1. Sorting and Subsetting:

Complete all following Task:
• Dataset for the Task: "titanic.csv"
Following task is common for all the problem:
1. Load the provided dataset and import in pandas DataFrame.
2. Check info of the DataFrame and identify following:
"""

import pandas as pd

#Load Titanic dataset from specified file path
df=pd.read_csv('/content/drive/MyDrive/Datasets/Titanic-Dataset.csv')

df

#Display the first five rows of dataset
df.head()

#Display the last five rows of datset
df.tail()

#Display summary statistics
df.describe()

#Display summary information
df.info()

#Print number of rows and columns in the dataframe
print ( f"The DataFrame has {df. shape [0]} rows and {df. shape[1]} columns .")

"""Problem 1 - Sorting:
1. Create a DataFrame called fare that contains only the Fare column of the Titanic dataset. Print the
head of the result.
2. Create a DataFrame called class age that contains only the Pclass and Age columns of the Titanic
dataset, in that order. Print the head of the result.
3. Create a DataFrame called survived gender that contains the Survived and Sex columns of the
Titanic dataset, in that order.Print the head of the result.
"""

#Create a dataframe 'fare' containing only fare column of dataset
fare=df['Fare']
print(fare.head()) #Display first five rows

#Create a dataframe containing only Pclass and Age columns
class_age=df[['Pclass','Age']]
print(class_age.head())

#Create a dataframe containing Survived and Sex columns
survived_gender=df[['Survived','Sex']]
print(survived_gender.head())

"""Problem - 2 - Subsetting:
Complete all the following Task:
Subsetting Rows:
1. Filter the Titanic dataset for cases where the passenger’s fare is greater than 100, assigning it
to fare gt 100.View the printed result.
2. Filter the Titanic dataset for cases where the passenger’s class (Pclass) is 1, assigning it to
first class.View the printed result.
3. Filter the Titanic dataset for cases where the passenger’s age is less than 18 and the passenger
is female (Sex is "female"), assigning it to female under 18. View the printed result.
"""

#Filter dataset such that the passenger's fare is greater than 100
fare_gt_100=df[df['Fare']>100]
fare_gt_100

#Filter dataset such that Pclass is 1
first_class=df[df['Pclass']==1]
first_class

#Filter dataset such that passenger's age is less than 18 and sex is female
female_under_18=df[(df['Age']<18) & (df['Sex']=='female')]
female_under_18

"""Subsetting Rows by Categorical variables:
1. Filter the Titanic dataset for passengers whose Embarked port is either "C" (Cherbourg) or "S"
(Southampton), assigning the result to embarked c or s. View the printed result.
2. Filter the Titanic dataset for passengers whose Pclass is in the list [1, 2] (indicating first
or second class), assigning the result to first second class.View the printed result.
"""

#Filter the dataset for passengers having embarked port either as S or C
embarked_c_or_s=df[(df['Embarked']=='C') | (df['Embarked']=='S')]
embarked_c_or_s

#Filter the dataset for passengers whose Pclas is in the list[1,2] using .isin function
first_second_class=df[df['Pclass'].isin([1,2])]
first_second_class

"""
3.2 Exploratory Data Analysis Practice Exercise - 1.

Warning: Handle missing values in the Age column by filling them with the median age of

the dataset before performing the division.)

Answer the following questions from Dataset:
Which passenger had the highest fare paid relative to their age?
To answer the question perform following operations:
1. Add a column to the Titanic dataset, fare per year, containing the fare divided by the age of
the passenger(i.e., Fare/Age).
2. Subset rows where fare per year is higher than 5, assigning this to high fare age.
3. Sort high fare age by descending fare per year, assigning this to high fare age srt.
4. Select only the Name and fare per year columns of high fare age srt and save the result as result.
5. Look at the result."""

#Handle null values in Age column using .median()
df['Age']=df['Age'].fillna(df['Age'].median())
df['Age']

#Add a column to the datset containing fare divided by age of passeneger
df['fare_per_year']=df['Fare']/df['Age']
df['fare_per_year']

#Subset rows having fare per year higher than 5
high_fare_age=df[df['fare_per_year']>5]
high_fare_age

#Sort high fare age by descending fare per year
high_fare_age_srt=high_fare_age.sort_values(by='fare_per_year',ascending=False)
high_fare_age_srt

#Select only Name and fare_per_year columns and assign it to result
result=high_fare_age_srt[['Name','fare_per_year']]
result  #Display Name and fare_per_year columns

"""Which adult male passenger (age ≥ 18 and Sex is ’male’) paid the highest fare relative to their
class?
To answer the question perform following operations:
1. Add a column to the Titanic dataset, fare per class, containing the fare divided by the passenger
class i.e. Fare / Pclass.
2. Subset rows where the passenger is male (Sex is ”male”) and an adult (Age is greater than or equal
to 18), assigning this to adult males.
3. Sort adult males by descending fare per class, assigning this to adult males srt.
4. Select only the Name, Age, and fare per class columns of adult males sr and save the result
as result.
5. Look at the result.
"""

#Add a column fare per class to datset containing fare divided by Pclass
df['fare_per_class']=df['Fare']/df['Pclass']
df['fare_per_class']

#Subset rows having male passenger whose age is greater than or equal to 18
adult_males=df[(df['Sex']=='male') & (df['Age']>=18)]
adult_males

#Sort adult males by descending fare per class
adult_males_srt=adult_males.sort_values(by='fare_per_class',ascending=False)
adult_males_srt

#Select only Name, age and fare_per_class columns and save it in result
result=adult_males_srt[['Name','Age','fare_per_class']]
result

"""
3.3 Exploratory Data Analysis with Group-by Method Practice Exercise:
Based on the dataset Answer the following question:

What percent of the total fare revenue came from each passenger class?
To answer the question perform following operation:
1. Calculate the total Fare paid across all passengers in the Titanic dataset.
2. Subset for passengers in first class (Pclass is 1) and calculate their total fare.
3. Do the same for second class (Pclass is 2) and third class (Pclass is 3).
4. Combine the fare totals from first, second, and third classes into a list.
5. Divide the totals for each class by the overall total fare to get the proportion of fare revenue by class."""

#Calculate total fare paid across all passengers
total_fare=df['Fare'].sum()
total_fare #display total fare

#Select passengers in first class and calculate total fare
first_class_fare=df[df['Pclass']==1]['Fare'].sum()
#Display total fare paid by first-class passengers
first_class_fare

#Select passengers in second class and calculate total fare
second_class_fare=df[df['Pclass']==2]['Fare'].sum()
#Display total fare paid by second-class passengers
second_class_fare

#Select passengers in third class and calculate total fare
third_class_fare=df[df['Pclass']==3]['Fare'].sum()
#Display total fare paid by third-class passengers
third_class_fare

#Create a list of total fares for each class
total_class_fare=[first_class_fare,second_class_fare,third_class_fare]
total_class_fare #display total fares of all classes

#Calculate the proportion of total fare revenue for each class
fare_revenue_proportion=[fare/total_fare for fare in total_class_fare]
fare_revenue_proportion  #Display the fare revenue proportions of each class

"""Based on the dataset Answer the following question:

What percent of the total number of passengers on the Titanic belonged to each age group
(e.g., child, adult, senior)?
To answer the question perform following operation:
1. Create a new column, age group, that categorizes passengers into "child" (age < 18), "adult" (age
18{64), and "senior" (age 65 and above).
2. Calculate the total number of passengers on the Titanic.
3. Count the number of passengers in each age group.
4. Divide the count of each age group by the total number of passengers to get the proportion of passengers
in each age group.
5. Display the proportion as a percentage.
"""

import numpy as np
#Define conditions based on age
conditions=[(df['Age']<18),(df['Age']>=18)&(df['Age']<65),(df['Age']>=65)]
#Define corresponding age groups
age_groups=['Child','Adult','Senior']
#Create a new column Age Group based on conditions
df['Age Group']=np.select(conditions,age_groups,default='unknown')
df  #Display the updated dataframe

#Calculate total number of passengers in dataframe
total_passengers=df.shape[0]
total_passengers

#Count the number of passengers in each age group
age_group_count=df['Age Group'].value_counts()
age_group_count

#Calculate proportion of passengers in each age group
age_group_proportion=age_group_count/total_passengers
age_group_proportion

#Convert proportion to percentage
age_group_percentage=age_group_proportion*100
age_group_percentage