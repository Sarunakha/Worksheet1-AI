# -*- coding: utf-8 -*-
"""worksheet2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_ffreFHOH_5m_1aEvuWXYEdy5D5jfz5_

#Problem 1 - Data Read, Write and Inspect:
Complete all following Task:

• Dataset for the Task: "bank.csv"
1. Load the provided dataset and import in pandas DataFrame.
2. Check info of the DataFrame and identify following:

(a) columns with dtypes=object

(b) unique values of those columns.

(c) check for the total number of null values in each column.
3. Drop all the columns with dtypes object and store in new DataFrame, also write the DataFrame in
”.csv” with name ”banknumericdata.csv”
4. Read ”banknumericdata.csv” and Find the summary statistics.
"""

import pandas as pd
df = pd.read_csv('/content/drive/MyDrive/Datasets/bank .csv')
df

df.info()

df.select_dtypes(include=['object'])

df.select_dtypes(include=['object']).nunique()

df.isnull().sum()

df_without_cloumns = df.select_dtypes(include=['object'])
df_after_dropping = df.drop(columns=df_without_cloumns)
df_after_dropping

df_new = pd.DataFrame(df_after_dropping)
df_new

df_new.to_csv('banknumericdata.csv')
df_new = pd.read_csv('/content/banknumericdata.csv')
df_new

df_new.describe()

"""#Problem 2 - Data Imputations:

Complete all the following Task:

• Dataset for the Task: "medical_student.csv"
1. Load the provided dataset and import in pandas DataFrame.
2. Check info of the DataFrame and identify column with missing (null) values.
3. For the column with missing values fill the values using various techniques we discussed above. Try
to explain why did you select the particular methods for particular column.
4. Check for any duplicate values present in Dataset and do necessary to manage the duplicate items.
{Hint: dataset.duplicated.sum()}
"""

import pandas as pd
df1 = pd.read_csv('/content/drive/MyDrive/Datasets/medical_students_dataset.csv')
df1

df1.info()

df1.isnull().sum()

df1_filled = df1.ffill()
df1_filled

df1.duplicated()

df1.drop_duplicates()

"""Dataset Used: "titanic.csv"

#Problem - 1:

Create a DataFrame that is subsetted for the columns ’Name’, ’Pclass’, ’Sex’, ’Age’, ’Fare’, and ’Survived’.
Retain only those rows where ’Pclass’ is equal to 1, representing first-class passengers. What is the mean,
median, maximum value, and minimum value of the ’Fare’ column?
"""

import pandas as pd
df2 = pd.read_csv('/content/drive/MyDrive/Datasets/Titanic-Dataset.csv')
df2

df2_subset = df2[['Name', 'Pclass', 'Sex', 'Age', 'Fare', 'Survived']]
df2_subset

First_class = df2_subset[df2_subset['Pclass'] == 1]
First_class

mean = First_class['Fare'].mean()
mean

median = First_class['Fare'].median()
median

maximum = First_class['Fare'].max()
maximum

minimum = First_class['Fare'].min()
minimum

"""#Problem - 2:

How many null values are contained in the ’Age’ column in your subsetted DataFrame? Once you’ve found
this out, drop them from your DataFrame.
"""

df2_subset['Age'].isnull().sum()

df2_ater_dropping = df2_subset.dropna(subset = ['Age'])
df2_ater_dropping

"""#Problem - 3:

The ’Embarked’ column in the Titanic dataset contains categorical data representing the ports of embarkation:

• ’C’ for Cherbourg

• ’Q’ for Queenstown

• ’S’ for Southampton

Task:
1. Use one-hot encoding to convert the ’Embarked’ column into separate binary columns (’Embarked C’,
’Embarked Q’, ’Embarked S’).
2. Add these new columns to the original DataFrame.
3. Drop the original ’Embarked’ column.
4. Print the first few rows of the modified DataFrame to verify the changes.
"""

encoded_embarked = pd.get_dummies(df2['Embarked'], prefix='Embarked')
encoded_embarked

new_df2 = pd.concat([df2, encoded_embarked], axis=1)
new_df2

new_df2 = new_df2.drop(columns=['Embarked'])
new_df2

new_df2.head()

"""#Problem - 4:

Compare the mean survival rates (’Survived’) for the different groups in the ’Sex’ column. Draw a visualization to show how the survival distributions vary by gender.
"""

mean_survival_rates = df2.groupby('Sex')['Survived'].mean()
mean_survival_rates

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(6, 5))
sns.barplot(x='Sex', y='Survived', data=df2)
plt.title('Survival Distributions by Gender', fontsize=10)
plt.ylabel('Survived', fontsize=12)
plt.xlabel('Gender', fontsize=12)
plt.show()

"""#Problem - 5:

Draw a visualization that breaks your visualization from Exercise 3 down by the port of embarkation (’Embarked’). In this instance, compare the ports ’C’ (Cherbourg), ’Q’ (Queenstown), and ’S’ (Southampton)
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(6, 5))
sns.barplot(x='Embarked', y='Survived', hue='Sex', data=df2)
plt.title('Survival Distributions by Gender and Embarkation Port', fontsize=16)
plt.ylabel('Survived', fontsize=12)
plt.xlabel('Embarkation Port', fontsize=12)
plt.legend(title='Gender')
plt.show()

"""#Problem - 6{Optional}:

Show how the survival rates (’Survived’) vary by age group and passenger class (’Pclass’). Break up the
’Age’ column into five quantiles in your DataFrame, and then compare the means of ’Survived’ by class
and age group. Draw a visualization using a any plotting library to represent this graphically
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
df2['AgeGroup'] = pd.qcut(df2['Age'], 5, labels=['Q1', 'Q2', 'Q3', 'Q4', 'Q5'])
mean_survival = df2.groupby(['AgeGroup', 'Pclass'])['Survived'].mean().reset_index()
plt.figure(figsize=(10, 6))
sns.barplot(x='AgeGroup', y='Survived', hue='Pclass', data=mean_survival, palette='muted')
plt.title('Mean Survival Rates by Age Group and Passenger Class', fontsize=16)
plt.ylabel('Mean Survival Rate', fontsize=12)
plt.xlabel('Age Group', fontsize=12)
plt.legend(title='Passenger Class', loc='upper left')
plt.show()